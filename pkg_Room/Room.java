package pkg_Room;import pkg_Items.*;import pkg_Character.Charactere;import java.util.Set;import java.util.HashMap;import java.util.Iterator;import java.util.Stack;/** * Class Room - a room in an adventure game. * * This class is part of the "World of Zuul" application.  * "World of Zuul" is a very simple, text based adventure game.   * * A "Room" represents one location in the scenery of the game.  It is  * connected to other rooms via exits.  For each existing exit, the room  * stores a reference to the neighboring room. *  * @author  Michael Kolling and David J. Barnes * @version 1.0 (February 2002) DBMOD:04/04/2008 */public class Room {    private String aDescription;    private HashMap<String,Room> exits;        // stores exits of this room.    private String aImageName;    private ItemList aItems;    private Item aItem;    private Stack<Room> aBackRooms;    private Room aBackRoom;    private Charactere aCharacter;    /**     * Create a room described "description" with a given image.      * Initially, it has no exits. "description" is something like      * "in a kitchen" or "in an open court yard".     */    public Room(final String pDescription,final String pImage, final Item pItem, final Charactere pCha)     {        this.aDescription = pDescription;        exits = new HashMap<String,Room>();        this.aImageName = pImage;        this.aItems = new ItemList();        this.aItem = pItem;        this.aBackRooms = new Stack<Room>();        this.aCharacter = pCha;    }//Room        /**     * Define an exit from this room.     */    public void setExit(final String pDirection, final Room pNeighbor)     {        exits.put(pDirection, pNeighbor);    }//setExit    /**     * Return the description of the room (the one that was defined in the     * constructor).     */    public String getDescription()    {        return this.aDescription;    }//getDescription        /**     * Returns the character of the room     */    public Charactere getChaRoom()    {        return this.aCharacter;    }        /**     * Return a long description of this room, in the form:     *     You are in the kitchen.     *     Exits: north west     */    public String getLongDescription()    {         String vS= "You are " + this.aDescription + ".\n" + this.getExitString() + "\n";          if (! this.aItems.isEmpty()) vS = vS + "Items : " + this.aItems.getItemsString();         if(this.aCharacter != null) vS = vS + "Characters : " + this.aCharacter.getChaLongDesc();         return vS;    }//getLongDescription    /**     * Return a string describing the room's exits, for example     * "Exits: north west".     */    private String getExitString()    {        StringBuilder vReturnString = new StringBuilder( "Exits:" );        for ( String vS : exits.keySet() )            vReturnString.append( " " + vS );        return vReturnString.toString();    }//getExitString    /**     * Return the room that is reached if we go from this room in direction     * "direction". If there is no room in that direction, return null.     */    public Room getExit(final String pDirection)     {        return exits.get(pDirection);    }//getExit    /**     * Return a string describing the room's image name     */    public String getImageName()    {        return this.aImageName;    }//getImageName        /**     * Return the ItemList     */    public ItemList getItems()    {        return this.aItems;    }       /**     * Method use to add an Item to the list     */    public void addItem(final Item pItem)    {        this.aItems.put(pItem);    }//addItem()        /**     * Return the rooms (stack)     */    public Stack<Room> getBackRoom()    {        return this.aBackRooms;    }}