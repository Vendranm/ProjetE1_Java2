package pkg_Command;import java.util.HashMap;/** * This class is the main class of the "World of Zuul" application.  * "World of Zuul" is a very simple, text based adventure game. *  * This class holds an enumeration of all command words known to the game. * It is used to recognise commands as they are typed in. * * @author  Michael Kolling and David J. Barnes * @version 1.0 (February 2002) DBMOD: 04/04/2008 */public class CommandWords{    // a constant array that holds all valid command words    private HashMap<String, CommandWord> aValidCommands;    /**     * Constructor - initialise the command words.     */    public CommandWords()    {        aValidCommands = new HashMap<String, CommandWord>();        for(CommandWord vCommand : CommandWord.values())         {            if(vCommand != CommandWord.UNKNOWN)             {                aValidCommands.put(vCommand.toString(), vCommand);            }        }    }        /**     * Find the CommandWord associated with a command word.     * @param commandWord The word to look up.     * @return The CommandWord correspondng to commandWord, or UNKNOWN     *         if it is not a valid command word.     */    public CommandWord getCommandWord(final String pCommandWord)    {        CommandWord vCommand = aValidCommands.get(pCommandWord);        if(vCommand != null)         {            return vCommand;        }        else         {            return CommandWord.UNKNOWN;        }    }        /**     * Check whether a given String is a valid command word.      * @return true if it is, false if it isn't.     */    public boolean isCommand(final String aString)    {        return aValidCommands.containsKey(aString);    }    /**     * returns a String of all valid commands.     */    public String getCommandList()     {        StringBuilder vCommands = new StringBuilder();        for(String command : aValidCommands.keySet())         {            vCommands.append(command + " ");        }        //         for(int i = 0; i < aValidCommands.size(); i++) {        //             commands.append( aValidCommands[i] + "  " );        //         }        return vCommands.toString();    }        /**     * Return a Command from a commandWord     */    public Command getCommand(final String pCommandWord)    {        return this.getCommandWord(pCommandWord).getCommand();    }}